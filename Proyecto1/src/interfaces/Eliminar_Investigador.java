package interfaces;

import clases.Actualizar_Tabla;
import clases.Escribir_InvestigadorBinario;
import clases.Escribir_investigador;
import javax.swing.JOptionPane;
import clases.Muestra;
import clases.Escribir_muestra;
import java.util.ArrayList;
import java.util.List;
/**
 *
 * @author sebas
 */
public class Eliminar_Investigador extends javax.swing.JFrame {

    /* Creates new form Eliminar_Investigador*/
    public Eliminar_Investigador() {
        initComponents();
        setLocationRelativeTo(null); 
        setResizable(false);
        setTitle("Eliminar Investigador");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label_codigo = new javax.swing.JLabel();
        field_codigo = new javax.swing.JTextField();
        eliminar_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        label_codigo.setText("Código:");

        eliminar_btn.setText("ELIMINAR");
        eliminar_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminar_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(label_codigo)
                        .addGap(18, 18, 18)
                        .addComponent(field_codigo, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(eliminar_btn)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_codigo)
                    .addComponent(field_codigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(eliminar_btn)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Método que captura el evento de elminar un investigador
    private void eliminar_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminar_btnActionPerformed
        
        String codigo, nombre; //Strings auxiliares para guardar codigo y nombre
        codigo = field_codigo.getText(); //El se guarda el código almacenado en el JFrame
        int index = -1; //Se inicializa un entero que servirá como bandera
        
        int longitud = Escribir_investigador.investigadores.size(); //Se guarda la longitud del ArrayList de Investigadores
        
        //Se crea un bucle que recorra el ArrayList y que compare el código ingresado con los existentes en el array
        for(int i=0; i<longitud; i++){
            if(codigo.equals(Escribir_investigador.investigadores.get(i).getCodigo())){ //Se compara el codigo ingresado con cada codigo en el ArrayList
                index = i; //Si se encuentran coincidencias, se guarda el índice de la posición del Investigador
            }
        }
        if(index == -1){ //Si no se encontraron coincidencias se ejecuta el siguiente bloque
            JOptionPane.showMessageDialog(null, "No se encontraron coincidencias de código");
        }
        else{ //Si se econtraron coincidencias, se ejecuta el siguiente bloque de código
            nombre = Escribir_investigador.investigadores.get(index).getNombre(); //Se guarda el nombre del investigador para mostrarle al usuario qué investigador eliminó
            
            //Este if valida que si el investigador a eliminar tiene muestras asignadas, estas tomen el valor de "Ingreso" para que otros a otros investigadores se les pueda asignar luego
            if(Escribir_investigador.investigadores.get(index).getMuestra_asignada()!= null && !Escribir_investigador.investigadores.get(index).getMuestra_asignada().isEmpty() && Escribir_muestra.muestras != null && !Escribir_muestra.muestras.isEmpty()){
                
                int size = Escribir_investigador.investigadores.get(index).getMuestra_asignada().size(); //se guarda la longitud del la lista de muestras del investigador para recorrerla con un bucle
                
                List<Integer> indices = new ArrayList<>(); //Se crea un arraylist que guardará los indices de las muestras modificadas
                
                //Bucle for que recorre el ArrayList de tipo Muestra que le corresponde al investigador
                for(int i=0; i<size; i++){
                    String codigodemuestra; //String temporal que guarda el codigo de la muestra en la posición i
                    Muestra muestratemp_codigo = (Muestra) Escribir_investigador.investigadores.get(index).getMuestra_asignada().get(i); //Se guarda la muestra con el indice asociado en un Objeto de tipo Muestra, a través de un casteo
                    codigodemuestra = muestratemp_codigo.getCodigo(); //Se obtiene el código de dicha muestra
                    
                    //Bucle for anidado que compara las muestras del investigador con las muestras del sistema y modifica su estado
                    for(int j=0; j<Escribir_muestra.muestras.size(); j++){
                        if(codigodemuestra.equals(Escribir_muestra.muestras.get(j).getCodigo())){ //Si el codigo de la muestra temporal es igual a uno de indice i del array de Muestras  se modifica su estado y se guarda el índice
                            indices.add(j); //Se agrega el índice
                            Escribir_muestra.muestras.get(j).setEstado("Ingreso"); //Se modifica su estado a Ingreso
                        }
                    }
                }
                
                
                //Bucle for para actualizar todos los elementos de la tabla de Muestras, con los índices almacenados en el ArrayList de indices
                for(int i=0; i<indices.size(); i++){
                    Actualizar_Tabla.actualizar_muestra(Administrador.dtm_muestras, indices.get(i), Escribir_muestra.muestras);
                }
                
            }
            
            Escribir_investigador.investigadores.remove(index); //Se elimina el usuario del ArrayList
            JOptionPane.showMessageDialog(null,"Se eliminó el investigador " + codigo + " - " + nombre); //Se muestra el mensaje de que se eliminó al investigador, junto con su nombre y su código
            Actualizar_Tabla.eliminar_elemento(Administrador.dtm1, index); //Se elimina el registro de la tabla
            Escribir_InvestigadorBinario.escribir_investigadorbin(); //Se sobreescribe el binario con el nuevo arrayList
            Escribir_investigador.Escribir_investigadorCombo(Administrador.combo_investigador, Escribir_investigador.investigadores); //Se actualiza el JComboBox de investigadores
        }
        
        
    }//GEN-LAST:event_eliminar_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Eliminar_Investigador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Eliminar_Investigador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Eliminar_Investigador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Eliminar_Investigador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Eliminar_Investigador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton eliminar_btn;
    private javax.swing.JTextField field_codigo;
    private javax.swing.JLabel label_codigo;
    // End of variables declaration//GEN-END:variables
}
